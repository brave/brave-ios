# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

fastlane_version "2.86.0"

default_platform :ios

CONFIG_PATH = "../Client/Configuration"
LOCAL_PATH = "#{CONFIG_PATH}/Local"

platform :ios do
  before_all do |lane, options|
    # Verify clean repo by default
    unless options[:ignore_git_status]
      UI.message "Running git status check"
      ensure_git_status_clean(show_uncommitted_changes: true, show_diff: true)
    end
  end

  after_all do |lane, options|
    # If no uncommitted changes existed before running `lane`, reset any potential fastlane changes
    reset_git_repo(skip_clean: true) unless options[:ignore_git_status]

    clean_icons()
  end

  error do
    clean_icons()
  end

  desc "Run Unit Tests"
  lane :test do |options|
    sh("../Client/WebFilters/ContentBlocker/Lists/test-compile-all-lists.sh")
    run_tests(
      scheme: "Fennec",
      device: "iPhone 8",
      code_coverage: true,
      skip_testing: [
        "ClientTests/TabManagerTests/testQueryAddedTabs",
        "ClientTests/TabManagerTests/testQueryAddedPrivateTabs",
        "ClientTests/TabManagerTests/testQueryAddedMixedTabs",
        "ClientTests/UIImageViewExtensionsTests/testAsyncSetIcon",
        "ClientTests/UIImageViewExtensionsTests/testAsyncSetIconFail",
        "ClientTests/FingerprintProtectionTest/testFingerprintProtection",
        "ClientTests/TabSessionTests",
        "ClientTests/ContentBlockerTests",
        "DataTests/DeviceTests",
        "DataTests/DomainTests/testAllShieldsOff"
      ]
    )
  end

  desc "Creates a Brave Beta Release build for TestFlight."
  lane :beta do |options|
    overrideParams = {
      scheme: "FirefoxBeta",
      export_method: "development",
    }
    testflight_build({overrideParams: overrideParams})
  end

  desc "Creates a Brave Internal Beta Release build for TestFlight."
  lane :internal do |options|

    overrideParams = {
      scheme: "Fennec_Enterprise",
      export_method: "development",
    }
    testflight_build({overrideParams: overrideParams})
  end

  desc "Create an archive to be uploaded to the App Store"
  lane :release do |options|
    overrideParams = {
      scheme: "Firefox",
    }
    testflight_build({overrideParams: overrideParams})
  end

  desc "All Testflight releases use this as the foundation. Pass in `gym` override params."
  private_lane :testflight_build do |options|
    set_build_number(options)

    carthage(
      platform: "iOS",
      cache_builds: true,
      configuration: "Release",
    )
    defaultParams = gym_params()
    gym(defaultParams.merge!(options[:overrideParams]))
  end

  # Private helper methods ---------------------------------------

  desc "Returns the parameters that should be used in any fastlane build"
  lane :gym_params do
    {
      sdk: "iphoneos",
      clean: true,
      skip_package_ipa: true,
      xcargs: "-allowProvisioningUpdates BRAVE_API_KEY=\"#{sh("head", "-1", "#{ENV['HOME']}/.brave-api-key")}\""
    }
  end

  desc "Updates the project's build number to be the next number acceptable by TestFlight. Takes the following arguments:"
  lane :set_build_number do |options|
    dateFormat = "%y.%m.%d.%H"
    # Allows minute override in case two betas within same hour are required
    dateFormat += ".%M" if options[:minutes_in_build_number]
    formattedBuildNumber = Time.now.getutc.strftime(dateFormat)
    sh("echo GENERATED_BUILD_ID=#{formattedBuildNumber} > #{LOCAL_PATH}/BuildId.xcconfig")
  end

  # TODO: Attempt action override on same name
  private_lane :get_client_version_number do
    buildIdFile = Xcodeproj::Config.new("#{CONFIG_PATH}/Base.xcconfig")
    buildId = buildIdFile.attributes['BRAVE_VERSION']

    # Traditionally, would pull version number via:
    # get_version_number(target: "Client")
    # This however does not work since we use xcconfigq variables and Fastlane does not seem to parse
    #   these very well (e.g. this returns the literal value: "$(BRAVE_VERSION)")
  end

  private_lane :get_client_build_number do
    buildIdFile = Xcodeproj::Config.new("#{LOCAL_PATH}/BuildId.xcconfig")
    buildId = buildIdFile.attributes['GENERATED_BUILD_ID']
  end

  private_lane :clean_icons do
    # Regardless of git flags, always want to forcefully reset icon changes
    reset_git_repo(files: ["Client/Assets/Images.xcassets/AppIcon*"], force: true)
  end

  override_lane :get_build_number do
    get_client_build_number()
  end

  lane :logtest do |options|
    UI.message "1: #{options[:one]}"

    foo = sh("cat", "#{LOCAL_PATH}/AppleId")
    UI.message foo
  end

end
